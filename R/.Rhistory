help(package = "DRIP")
q()
edge_pars1 <- list(dKQ = matrix(0.0), bandwidth = as.integer(0), threshold = 0.0)
class(edge_pars1) <- "Edge_Parameters"
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
cat(obj$matrix, "\n")
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "matrix")
edge_pars1 <- list(dKQ = matrix(0.0, c(2, 2)), bandwidth = as.integer(0), threshold = 0.0)
class(edge_pars1) <- "Edge_Parameters"
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
cat(obj$matrix, "\n")
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "matrix")
edge_pars1 <- list(dKQ = matrix(0.0, c(2, 2)), bandwidth = as.integer(0), threshold = 0.0)
class(edge_pars1) <- "Edge_Parameters"
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
cat(obj$dKQ, "\n")
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "matrix")
edge_pars1 <- list(dKQ = matrix(0.0, nrow = 2, ncol = 2), bandwidth = as.integer(0), threshold = 0.0)
class(edge_pars1) <- "Edge_Parameters"
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
cat(obj$dKQ, "\n")
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "matrix")
print(matrix(0, 2, 2))
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
print.data.frame(obj$dKQ)
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "matrix")
edge_pars1 <- list(dKQ = matrix(0.0, nrow = 2, ncol = 2), bandwidth = as.integer(0), threshold = 0.0)
class(edge_pars1) <- "Edge_Parameters"
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
print.data.frame(obj$dKQ)
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "matrix")
edge_pars1$dKQ
print(edge_pars1$dKQ)
print.data.frame(edge_pars1)
print.data.frame(edge_pars1$dKQ)
print(edge_pars1, type = "parameters")
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
print.matrix(obj$dKQ)
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "parameters")
print(edge_pars1, type = "matrix")
print.table(edge_pars1$dKQ)
edge_pars1 <- list(dKQ = matrix(0.0, nrow = 2, ncol = 2), bandwidth = as.integer(0), threshold = 0.0)
class(edge_pars1) <- "Edge_Parameters"
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
print.table(obj$dKQ)
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat(obj$matrix, "\n")
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "matrix")
print(edge_pars1, type = "all")
edge_pars1 <- list(dKQ = matrix(0.0, nrow = 2, ncol = 2), bandwidth = as.integer(0), threshold = 0.0)
class(edge_pars1) <- "Edge_Parameters"
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
print.table(obj$dKQ)
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
print.table(obj$dKQ)
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "all")
print.Edge_Parameters <- function(obj, type = c("matrix", "parameters", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "matrix") {
cat("The bootstrap matrix:\n")
print.table(obj$dKQ)
}
if (type == "parameters") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
if (type == "all") {
cat("The bootstrap matrix:\n")
print.table(obj$dKQ)
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The selected threshold: ", obj$threshold, "\n")
}
}
}
print(edge_pars1, type = "all")
library(DRIP)
set.seed(24)
parSel <- stepEdgeParSel(image = sar, bandwidth = 5,
thresh = c(17, 21), nboot = 1)
parSel1 <- as.Edge_Parameters(parSel)
parSel1 <- list(dKQ = parSel$output_matrix, bandwidth = parSel$selected_bandwidth, threshold = parSel$selected_threshold)
class(parSel1) <- "Edge_Parameters"
print(parSel1, type = "all")
print(parSel1, type = "matrix")
?predict.glm
stepEdgeParSel <- function(image, bandwidth, thresh, nboot,
degree = 1, blur = FALSE){
degree <- round(degree)
stopifnot((degree == 0 || degree == 1))
if (degree == 0) {
if (blur) {
out <- stepEdgeParSelLC2K(image = image, bandwidth = bandwidth,
thresh = thresh, nboot = nboot)
} else { # no blur
out <- stepEdgeParSelLCK(image = image, bandwidth = bandwidth,
thresh = thresh, nboot = nboot)
}
} else { # degree = 1
if (blur) {
out <- stepEdgeParSelLL2K(image = image, bandwidth = bandwidth,
thresh = thresh, nboot = nboot)
} else { # no blur
out <- stepEdgeParSelLLK(image = image, bandwidth = bandwidth,
thresh = thresh, nboot = nboot)
}
}
out1 <- list(dKQ = out$output_matrix,
bandwidth = out$selected_bandwidth,
threshold = out$selected_threshold)
class(out1) <- "Edge_Parameters"
return(out1)
}
parSel <- stepEdgeParSel(image = sar, bandwidth = 5,
thresh = c(17, 21), nboot = 1)
library(tools)
db <- Rd_db("stats")
grep("predict.glm", names(db), value = TRUE)
db[grep("predict.glm.Rd",names(db))]
print.data.frame(data.frame(x = 1:3, y = letters[1:3]))
methods(print)
summary.lm
?print.numeric_version
?print.table
print.table(1:3)
print.data.frame(1:3)
library(DRIP)
version(DRIP)
help(package = "DRIP")
q()
foo <- list(cv_scores = matrix(c(1.2, 1.3), nrow = 1), bandwidth = as.integer(4))
library(DRIP)
class(foo) <- "Three_Stage_Parameters"
print(foo)
print(foo, type = "all")
foo <- list(cv_scores = matrix(c(1.2, 1.3), nrow = 1), bandwidth = as.integer(4))
class(foo) <- "Three_Stage_Parameters"
print.Three_Stage_Parameters <- function(obj, type = c("cv_scores", "bandwidth", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "cv_scores") {
cat("The cross validation scores:\n")
print.table(obj$cv_scores)
}
if (type == "bandwidth") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
}
if (type == "all") {
cat("The cross validation scores:\n")
print.table(obj$cv_scores)
cat("The selected bandwidth: ", obj$bandwidth, "\n")
}
}
}
print(foo, type = "all")
as.integer(3:4)
# The print method for S3 class
foo <- list(LLK = matrix(0.0, nrow = 2, ncol = 2), sigma = 0.0, cv_scores = c(1.2, 1.1), input = as.integer(3:4), bandwidth = as.integer(3))
class(out1) <- "JPEX_Parameters"
class(foo) <- "JPEX_Parameters"
print.JPEX_Parameters <- function(obj, type = c("cv_scores", "bandwidth", "sigma", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "cv_scores") {
cat("The cross validation scores:\n")
print.table(obj$cv_scores)
}
if (type == "bandwidth") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
}
if (type == "sigma") {
cat("The estimated sigma: ", obj$sigma, "\n")
}
if (type == "all") {
cat("The cross validation scores:\n")
print.table(obj$cv_scores)
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The estimated sigma: ", obj$sigma, "\n")
}
}
}
print(foo, type = "all")
# The print method for S3 class
foo <- list(cv_dataframe = data.frame(x = 1:2, y = 3:4), bandwidth = as.integer(3), sigma = 0.0, phi0 = 1.0, mean_std_abs = 1.0)
class(foo) <- "Surface_Cluster_Parameters"
print.Surface_Cluster_Parameters <- function(obj, type = c("cv_scores", "bandwidth", "sigma", "phi0", "mean_std_abs", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "cv_scores") {
cat("The cross validation scores:\n")
print.data.frame(obj$cv_dataframe)
}
if (type == "bandwidth") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
}
if (type == "sigma") {
cat("The estimated sigma: ", obj$sigma, "\n")
}
if (type == "phi0") {
cat("The estimated value of the density at 0: ", obj$phi0, "\n")
}
if (type == "mean_std_abs") {
cat("The estimated mean of absolute error: ", obj$mean_std_abs, "\n")
}
if (type == "all") {
cat("The cross validation scores:\n")
print.data.frame(obj$cv_dataframe)
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The estimated sigma: ", obj$sigma, "\n")
cat("The estimated value of the density at 0: ", obj$phi0, "\n")
cat("The estimated mean of absolute error: ", obj$mean_std_abs, "\n")
}
}
}
print(foo, type = "bandwidth")
print(foo, type = "all")
# S3 Class
foo <- list(fitted = matrix(0.0, nrow = 2, ncol = 0), bandwidth = 3.0, resid
= matrix(0.0, nrow = 2, ncol = 0), sigma = 0.0)
class(foo) <- "JPLLK_Parameters"
print.JPLLK_Parameters <- function(obj, type = c("bandwidth", "sigma", "all")) {
type <- match.arg(type)
if ("other.return.error" %in% type) {
stop("This option should not be used.")
} else {
if (type == "bandwidth") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
}
if (type == "sigma") {
cat("The estimated noise level: ", obj$sigma, "\n")
}
if (type == "all") {
cat("The selected bandwidth: ", obj$bandwidth, "\n")
cat("The estimated noise level: ", obj$sigma, "\n")
}
}
}
print(foo, type = "all")
print(foo, type = "bandwidth")
q()
q()
q()
library(DRIP)
cvout <- cv.jpex(stopsign, c(2, 3))
summary(cvout)
cvout
names(cvout)
q()
?plot.lm
?plot``
?plot
?plot.lm
?plot.lm
plot(x = 1:3, y = 2:5)
plot(x = 1:3, y = 2:4)
plot(x = 3:1, y = 2:4)
plot(x = 3:1, y = 2:4, type = "b")
library(DRIP)
cvout <- cv.jpex(stopsign, c(2, 3))
plot(cvout)
cvout <- cv.jpex(stopsign, c(2, 3, 4))
plot(cvout)
cvout <- cv.jpex(stopsign, c(4, 3, 2))
plot(cvout)
detach("package:DRIP", unload = TRUE)
?summary
library(DRIP)
fit <- JPLLK_surface(sar, bandwidth = c(3, 4))
summary(fit)
detach("package:DRIP", unload = TRUE)
?image
library(DRIP)
fit <- JPLLK_surface(sar, bandwidth = c(3, 4))
plot(fit)
detach("package:DRIP", unload = TRUE)
library(DRIP)
parSel <- stepEdgeParSel(image = sar, bandwidth = 5,
thresh = c(17, 21), nboot = 1)
summary(parSel)
detach("package:DRIP", unload = TRUE)
library(DRIP)
step.edges <- stepEdge(peppers, bandwidth = 9, thresh = 17)
roof.edges <- roofEdge(peppers, bandwidth = 6, thresh = 3000,
edge1 = step.edges)
set.seed(24)
# Time consuming
parSel <- threeStageParSel(image = peppers, edge1 = step.edges,
edge2 = roof.edges, bandwidth = 3:4, nboot = 1, blur = TRUE)
summary(parSel)
as.integer(3:4)
detach("package:DRIP", unload = TRUE)
library(DRIP)
step.edges <- stepEdge(peppers, bandwidth = 9, thresh = 17)
roof.edges <- roofEdge(peppers, bandwidth = 6, thresh = 3000,
edge1 = step.edges)
set.seed(24)
parSel <- threeStageParSel(image = peppers, edge1 = step.edges,edge2 = roof.edges, bandwidth = 3:4, nboot = 1, blur = TRUE)
plot(parSel)
print(parSel, type = "All")
print(parSel, type = "all")
parSel <- threeStageParSel(image = peppers, edge1 = step.edges,edge2 = roof.edges, bandwidth = 3:5, nboot = 1, blur = TRUE)
print(parSel, type = "all")
plot(parSel)
detach("package:DRIP", unload = TRUE)
library(DRIP)
bandwidth_select <- surfaceCluster_bandwidth(image = brain,
bandwidths = c(3:4), sig.level = .9995, blur = TRUE)
summary(bandwidth_select)
df <- data.frame(x = 1:3, y = 4:6)
ll <- list(df = df, foo = letters[1:3])
ll$df[, 1]
ll$df[, 2]
bandwidth_select$cv_dataframe
bandwidth_select <- surfaceCluster_bandwidth(image = brain,
bandwidths = c(3:4), sig.level = .95, blur = TRUE)
bandwidth_select$cv_dataframe
bandwidth_select <- surfaceCluster_bandwidth(image = brain,
bandwidths = c(3:4), sig.level = .9, blur = TRUE)
bandwidth_select$cv_dataframe
bandwidth_select <- surfaceCluster_bandwidth(image = brain,
bandwidths = c(3:4), sig.level = .5, blur = TRUE)
bandwidth_select$cv_dataframe
bandwidth_select <- surfaceCluster_bandwidth(image = brain,
bandwidths = c(3:4), sig.level = .95, blur = FALSE)
bandwidth_select$cv_dataframe
bandwidth_select <- surfaceCluster_bandwidth(image = brain,
bandwidths = c(3:9), sig.level = .95, blur = TRUE)
bandwidth_select$cv_dataframe
?surfaceCluster_bandwidth
detach("package:DRIP", unload = TRUE)
library(DRIP)
bandwidth_select <- surfaceCluster_bandwidth(image = brain,bandwidths = c(3:9), sig.level = .95)
plot(bandwidth_select)
bandwidth_select <- surfaceCluster_bandwidth(image = brain,bandwidths = c(3:4), sig.level = .15, blur = TRUE)
bandwidth_select$cv_dataframe
detach("package:DRIP", unload = TRUE)
q()
library(DRIP)
bandwidth_select <- surfaceCluster_bandwidth(brain, 3:4)
bandwidth_select <- surfaceCluster_bandwidth(brain, 3:4, 0.95)
bandwidth_select
print(bandwidth_select, "all")
bandwidth_select <- surfaceCluster_bandwidth(brain, 3:4, 0.95, blur = TRUE)
print(bandwidth_select, "all")
bandwidth_select <- surfaceCluster_bandwidth(stopsign, 3:4, 0.95, blur = TRUE)
print(bandwidth_select, "all")
bandwidth_select <- surfaceCluster_bandwidth(stopsign + matrix(rnorm(dim(stopsign)[1] * dim(stopsign)[2], sd = 3), dim(stopsign)[1], dim(stopsign)[2]), 3:4, 0.95, blur = TRUE)
print(bandwidth_select, "all")
bandwidth_select <- surfaceCluster_bandwidth(stopsign + matrix(rnorm(dim(stopsign)[1] * dim(stopsign)[2], sd = 7), dim(stopsign)[1], dim(stopsign)[2]), 3:4, 0.95, blur = TRUE)
print(bandwidth_select, "all")
bandwidth_select <- surfaceCluster_bandwidth(stopsign + matrix(rnorm(dim(stopsign)[1] * dim(stopsign)[2], sd = 7), dim(stopsign)[1], dim(stopsign)[2]), 4:8, 0.95, blur = TRUE)
print(bandwidth_select, "all")
bandwidth_select <- surfaceCluster_bandwidth(stopsign + matrix(rnorm(dim(stopsign)[1] * dim(stopsign)[2], sd = 9), dim(stopsign)[1], dim(stopsign)[2]), 4:8, 0.95, blur = TRUE)
print(bandwidth_select, "all")
q()
